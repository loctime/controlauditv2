name: Build Android APK

on:
  push:
    tags:
      - 'v*'   # Se ejecuta cuando hagas un tag tipo v1.0.0
  workflow_dispatch:  # Permite ejecutar manualmente desde GitHub

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '21'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      actions: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necesario para obtener el historial completo de git

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'  # Cache de dependencias para acelerar builds

      - name: Setup Java Development Kit
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'  # Cache de Gradle

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build web application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Sync Capacitor
        run: npx cap sync android

      - name: Decode Keystore
        run: echo "${{ secrets.DEBUG_KEYSTORE_FILE }}" | base64 --decode > android/debug.keystore

      - name: Set Gradle wrapper permissions
        working-directory: android
        run: chmod +x ./gradlew

      - name: Verify Keystore
        working-directory: android
        run: |
          ls -l debug.keystore
          keytool -list -v -keystore debug.keystore -storepass android

      - name: Prepare Signing Config
        working-directory: android
        run: |
          echo "signing.storeFile=debug.keystore" >> gradle.properties
          echo "signing.storePassword=android" >> gradle.properties
          echo "signing.keyAlias=androiddebugkey" >> gradle.properties
          echo "signing.keyPassword=android" >> gradle.properties

      - name: Modify Gradle Config for Signing
        working-directory: android
        run: |
          sed -i 's/signingConfig signingConfigs.debug/signingConfig signingConfigs.debug\n            signingConfig signingConfigs.release/' app/build.gradle

      - name: Rebuild Android APK with Signing
        working-directory: android
        run: |
          export GRADLE_OPTS="-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.jvmargs=-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError"
          ./gradlew clean assembleDebug --no-daemon --parallel

      - name: Verify APK exists
        run: |
          # Buscar APK de debug con cualquier variación del nombre
          if [ -f "android/app/build/outputs/apk/debug/app-debug.apk" ]; then
            echo "✅ APK debug encontrada (app-debug.apk)"
            ls -lh android/app/build/outputs/apk/debug/app-debug.apk
            echo "APK_PATH=android/app/build/outputs/apk/debug/app-debug.apk" >> $GITHUB_ENV
          elif [ -f "android/app/build/outputs/apk/debug/ControlAudit-debug.apk" ]; then
            echo "✅ APK debug encontrada (ControlAudit-debug.apk)"
            ls -lh android/app/build/outputs/apk/debug/ControlAudit-debug.apk
            echo "APK_PATH=android/app/build/outputs/apk/debug/ControlAudit-debug.apk" >> $GITHUB_ENV
          elif [ -f "android/app/build/outputs/apk/debug/ControlAudit-debug-debug.apk" ]; then
            echo "✅ APK debug-debug encontrada"
            ls -lh android/app/build/outputs/apk/debug/ControlAudit-debug-debug.apk
            echo "APK_PATH=android/app/build/outputs/apk/debug/ControlAudit-debug-debug.apk" >> $GITHUB_ENV
          else
            echo "❌ APK no encontrada en la ubicación esperada"
            ls -la android/app/build/outputs/apk/debug/
            exit 1
          fi

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ControlAudit-release
          path: ${{ env.APK_PATH }}
          retention-days: 30
          if-no-files-found: error

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ env.APK_PATH }}
          generate_release_notes: true
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Summary
        run: |
          echo "## 📱 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **App Name:** ControlAudit" >> $GITHUB_STEP_SUMMARY
          echo "- **Package ID:** com.controlaudit.app" >> $GITHUB_STEP_SUMMARY
          echo "- **Node Version:** ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Java Version:** ${{ env.JAVA_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type:** Release (Unsigned)" >> $GITHUB_STEP_SUMMARY
          echo "- **APK Size:** $(ls -lh ${{ env.APK_PATH }} | awk '{print $5}')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Build completado exitosamente!" >> $GITHUB_STEP_SUMMARY
