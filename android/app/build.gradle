plugins {
    id 'com.android.application'
    // Add the Google services Gradle plugin
    id 'com.google.gms.google-services'
}

android {
    namespace "com.controlaudit.app"
    compileSdk rootProject.ext.compileSdkVersion
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }
    
    defaultConfig {
        applicationId "com.controlaudit.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    signingConfigs {
        debug {
            // Usar keystore fijo del repositorio para huellas estables
            def repoDebugKeystore = file('../debug.keystore')
            if (repoDebugKeystore.exists()) {
                storeFile repoDebugKeystore
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
            } else {
                println "‚ö†Ô∏è  Keystore de debug fijo no encontrado en ${repoDebugKeystore.absolutePath}"
                println "üîß Genera uno con: scripts/generate-repo-debug-keystore.bat"
            }
        }

        release {
            // Si no hay keystore de release, usar el de debug
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            } else {
                // Usar el keystore de debug si no hay uno de release
                def repoDebugKeystore = file('../debug.keystore')
                if (repoDebugKeystore.exists()) {
                    storeFile repoDebugKeystore
                    storePassword 'android'
                    keyAlias 'androiddebugkey'
                    keyPassword 'android'
                } else {
                    println "‚ö†Ô∏è  No hay keystore de release ni de debug disponible"
                }
            }
        }
    }
    
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Solo firmar√° si pusiste las props arriba; si no, no validar√° nada.
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // Configurar nombre del APK
            setArchivesBaseName("ControlAudit")
        }
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:34.2.0')
    
    // Firebase Authentication
    implementation 'com.google.firebase:firebase-auth'
    
    // Firebase Analytics (opcional)
    implementation 'com.google.firebase:firebase-analytics'
    
    // Google Sign-In para Android
    implementation 'com.google.android.gms:play-services-auth:20.7.0'
    
    // Dependencias existentes
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

// Forzar Java 17 despu√©s de capacitor.build.gradle
android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
}

// Verificar si existe google-services.json
try {
    def servicesJSON = file('google-services.json')
    if (!servicesJSON.exists()) {
        logger.warn("‚ö†Ô∏è  google-services.json not found. Firebase services won't work properly.")
        logger.info("üìù Download google-services.json from Firebase Console and place it in android/app/")
    }
} catch(Exception e) {
    logger.warn("‚ö†Ô∏è  Error checking google-services.json: ${e.message}")
}
