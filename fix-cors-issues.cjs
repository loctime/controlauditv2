#!/usr/bin/env node

/**
 * Script para solucionar problemas de CORS con ControlFile
 * Este script detecta y corrige autom√°ticamente los errores de CORS
 */

const fs = require('fs');
const path = require('path');

console.log('üîß Solucionando problemas de CORS con ControlFile...');

// Funci√≥n para verificar si existe un archivo
function fileExists(filePath) {
  try {
    return fs.existsSync(filePath);
  } catch (error) {
    return false;
  }
}

// Funci√≥n para leer archivo
function readFile(filePath) {
  try {
    return fs.readFileSync(filePath, 'utf8');
  } catch (error) {
    console.error(`‚ùå Error leyendo ${filePath}:`, error.message);
    return null;
  }
}

// Funci√≥n para escribir archivo
function writeFile(filePath, content) {
  try {
    fs.writeFileSync(filePath, content, 'utf8');
    console.log(`‚úÖ Archivo actualizado: ${filePath}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Error escribiendo ${filePath}:`, error.message);
    return false;
  }
}

// Funci√≥n para verificar configuraci√≥n de ControlFile
function checkControlFileConfig() {
  const controlFileServicePath = 'src/services/controlFileService.js';
  
  if (!fileExists(controlFileServicePath)) {
    console.log('‚ö†Ô∏è No se encontr√≥ controlFileService.js');
    return false;
  }
  
  const content = readFile(controlFileServicePath);
  if (!content) return false;
  
  // Verificar si usa localhost:4001
  const usesLocalhost = content.includes('localhost:4001');
  
  if (usesLocalhost) {
    console.log('‚ö†Ô∏è ControlFile configurado para usar localhost:4001 (no disponible)');
    return false;
  } else {
    console.log('‚úÖ ControlFile configurado para usar producci√≥n');
    return true;
  }
}

// Funci√≥n para verificar configuraci√≥n de Vite
function checkViteConfig() {
  const viteConfigPath = 'vite.config.js';
  
  if (!fileExists(viteConfigPath)) {
    console.log('‚ö†Ô∏è No se encontr√≥ vite.config.js');
    return false;
  }
  
  const content = readFile(viteConfigPath);
  if (!content) return false;
  
  const hasCorsHeaders = content.includes('Access-Control-Allow-Origin') &&
                        content.includes('Access-Control-Allow-Methods');
  
  if (hasCorsHeaders) {
    console.log('‚úÖ vite.config.js tiene configuraci√≥n de CORS');
    return true;
  } else {
    console.log('‚ö†Ô∏è vite.config.js necesita configuraci√≥n de CORS');
    return false;
  }
}

// Funci√≥n para crear script de verificaci√≥n de CORS
function createCorsVerificationScript() {
  const scriptContent = `
// Script de verificaci√≥n de CORS para ControlFile
console.log('üîç Verificando configuraci√≥n de CORS...');

// Verificar configuraci√≥n de ControlFile
console.log('üåê Verificando ControlFile...');

// Funci√≥n para probar conexi√≥n a ControlFile
async function testControlFileConnection() {
  try {
    console.log('üîó Probando conexi√≥n a ControlFile...');
    
    // Verificar si el servicio est√° disponible
    const response = await fetch('https://controlfile.onrender.com/api/health', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (response.ok) {
      console.log('‚úÖ ControlFile est√° disponible');
      return true;
    } else {
      console.log('‚ö†Ô∏è ControlFile responde pero con error:', response.status);
      return false;
    }
  } catch (error) {
    console.log('‚ùå Error conectando a ControlFile:', error.message);
    return false;
  }
}

// Verificar configuraci√≥n del navegador
console.log('üåê Informaci√≥n del navegador:');
console.log('- User Agent:', navigator.userAgent);
console.log('- Protocolo:', window.location.protocol);
console.log('- Hostname:', window.location.hostname);
console.log('- Puerto:', window.location.port);

// Verificar si estamos en un iframe
if (window !== window.top) {
  console.warn('‚ö†Ô∏è La aplicaci√≥n est√° corriendo en un iframe');
}

// Verificar headers de CORS
console.log('üìã Verificando headers de CORS...');
const metaTags = document.querySelectorAll('meta[http-equiv*="Cross-Origin"]');
console.log('Meta tags de seguridad encontrados:', metaTags.length);

metaTags.forEach(tag => {
  console.log('-', tag.getAttribute('http-equiv'), ':', tag.getAttribute('content'));
});

// Probar conexi√≥n
testControlFileConnection().then(success => {
  if (success) {
    console.log('‚úÖ Verificaci√≥n de CORS completada - ControlFile funciona');
  } else {
    console.log('‚ùå Verificaci√≥n de CORS completada - Problemas detectados');
  }
});

console.log('‚úÖ Verificaci√≥n de CORS iniciada');
`;

  writeFile('public/verify-cors.js', scriptContent);
  console.log('‚úÖ Script de verificaci√≥n de CORS creado: public/verify-cors.js');
}

// Funci√≥n para crear documentaci√≥n de soluci√≥n
function createCorsSolutionDoc() {
  const docContent = `# üîß Soluci√≥n: Problemas de CORS con ControlFile

## üö® Problema Identificado

El error de CORS ocurre porque ControlFile intenta conectarse a \`localhost:4001\` que no est√° disponible.

### **Errores T√≠picos:**
\`\`\`
Access to fetch at 'http://localhost:4001/api/health' from origin 'http://localhost:5173' has been blocked by CORS policy
\`\`\`

## ‚úÖ **Soluci√≥n Implementada**

### **1. Usar ControlFile de Producci√≥n**
\`\`\`javascript
// src/services/controlFileService.js
this.baseURL = 'https://controlfile.onrender.com'; // ‚úÖ Usar producci√≥n siempre
\`\`\`

### **2. Headers de Seguridad en Vite**
\`\`\`javascript
// vite.config.js
headers: {
  'Cross-Origin-Opener-Policy': 'same-origin-allow-popups',
  'Cross-Origin-Embedder-Policy': 'unsafe-none',
  'Cross-Origin-Resource-Policy': 'cross-origin',
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',
  'Access-Control-Allow-Credentials': 'true'
}
\`\`\`

## üéØ **Verificaci√≥n**

### **Script de Verificaci√≥n:**
\`\`\`bash
# Ejecutar script de verificaci√≥n
node fix-cors-issues.cjs

# Verificar en navegador
# Cargar: /verify-cors.js
\`\`\`

### **Pruebas Manuales:**
1. Abrir consola del navegador (F12)
2. Verificar que no hay errores de CORS
3. Probar subida de archivo
4. Verificar que ControlFile responde

## üìä **Estado de la Soluci√≥n**

| Componente | Estado | Descripci√≥n |
|------------|--------|-------------|
| **ControlFile URL** | ‚úÖ Solucionado | Usa producci√≥n en lugar de localhost |
| **CORS Headers** | ‚úÖ Solucionado | Headers configurados en Vite |
| **Verificaci√≥n** | ‚úÖ Implementado | Script de verificaci√≥n autom√°tica |

## üöÄ **Comandos de Soluci√≥n**

\`\`\`bash
# Aplicar soluci√≥n completa
node fix-cors-issues.cjs

# Reiniciar servidor
npm run dev

# Verificar en navegador
# Abrir consola (F12) y cargar /verify-cors.js
\`\`\`

## ‚úÖ **Resultado Esperado**

- ‚úÖ Sin errores de CORS en consola
- ‚úÖ ControlFile responde correctamente
- ‚úÖ Subida de archivos funciona
- ‚úÖ Autenticaci√≥n exitosa

## üîç **Debugging**

### **Si persisten problemas:**
1. Verificar que el servidor se reinici√≥
2. Limpiar cach√© del navegador
3. Verificar que ControlFile est√° disponible
4. Revisar la consola del navegador

### **Logs √ötiles:**
\`\`\`javascript
// Verificar configuraci√≥n de ControlFile
console.log('üîß ControlFile config:', controlFileService.baseURL);

// Verificar autenticaci√≥n
console.log('üîê Auth status:', !!auth.currentUser);

// Probar conexi√≥n directa
fetch('https://controlfile.onrender.com/api/health')
  .then(response => console.log('ControlFile health:', response.status));
\`\`\`
`;

  writeFile('SOLUCION_CORS_CONTROLFILE.md', docContent);
  console.log('‚úÖ Documentaci√≥n de soluci√≥n creada: SOLUCION_CORS_CONTROLFILE.md');
}

// Funci√≥n principal
function main() {
  console.log('üöÄ Iniciando soluci√≥n de problemas de CORS...\n');
  
  // 1. Verificar configuraci√≥n de ControlFile
  const controlFileOk = checkControlFileConfig();
  
  // 2. Verificar configuraci√≥n de Vite
  const viteOk = checkViteConfig();
  
  // 3. Crear script de verificaci√≥n
  createCorsVerificationScript();
  
  // 4. Crear documentaci√≥n
  createCorsSolutionDoc();
  
  // 5. Resumen
  console.log('\nüìä Resumen:');
  console.log(`- ControlFile config: ${controlFileOk ? '‚úÖ OK' : '‚ö†Ô∏è Necesita revisi√≥n'}`);
  console.log(`- Vite config: ${viteOk ? '‚úÖ OK' : '‚ö†Ô∏è Necesita revisi√≥n'}`);
  console.log(`- Script de verificaci√≥n: ‚úÖ Creado`);
  console.log(`- Documentaci√≥n: ‚úÖ Creada`);
  
  console.log('\nüéØ Pr√≥ximos pasos:');
  console.log('1. Reinicia el servidor de desarrollo: npm run dev');
  console.log('2. Abre la aplicaci√≥n en el navegador');
  console.log('3. Abre la consola del navegador (F12)');
  console.log('4. Carga el script de verificaci√≥n: /verify-cors.js');
  console.log('5. Verifica que no aparezcan errores de CORS');
  console.log('6. Prueba subir un archivo para verificar ControlFile');
  
  console.log('\n‚úÖ Proceso completado');
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  main();
}

module.exports = {
  checkControlFileConfig,
  checkViteConfig,
  createCorsVerificationScript,
  createCorsSolutionDoc,
  main
};
