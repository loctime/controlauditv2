import { useState, useEffect } from 'react';

export const usePWAInstall = () => {
  const [deferredPrompt, setDeferredPrompt] = useState(null);
  const [isInstalled, setIsInstalled] = useState(false);
  const [showButton, setShowButton] = useState(false);

  // FunciÃ³n para abrir tienda de aplicaciones
  const openAppStore = () => {
    const isAndroid = /Android/i.test(navigator.userAgent);
    const isIOS = /iPhone|iPad|iPod/i.test(navigator.userAgent);
    
    if (isAndroid) {
      // Intentar abrir Google Play Store directamente
      const playStoreUrl = 'market://details?id=com.microsoft.emmx';
      const playStoreWebUrl = 'https://play.google.com/store/apps/details?id=com.microsoft.emmx';
      
      // Crear un enlace temporal para probar si la app estÃ¡ instalada
      const link = document.createElement('a');
      link.href = playStoreUrl;
      link.style.display = 'none';
      document.body.appendChild(link);
      
      try {
        link.click();
        // Si no se abre la app, abrir la web
        setTimeout(() => {
          window.open(playStoreWebUrl, '_blank');
        }, 1000);
      } catch (error) {
        // Fallback a la web
        window.open(playStoreWebUrl, '_blank');
      } finally {
        document.body.removeChild(link);
      }
    } else if (isIOS) {
      // Para iOS, usar el esquema de App Store
      const appStoreUrl = 'itms-apps://itunes.apple.com/app/id1288723196';
      const appStoreWebUrl = 'https://apps.apple.com/app/microsoft-edge/id1288723196';
      
      try {
        window.location.href = appStoreUrl;
        // Fallback despuÃ©s de un tiempo
        setTimeout(() => {
          window.open(appStoreWebUrl, '_blank');
        }, 2000);
      } catch (error) {
        window.open(appStoreWebUrl, '_blank');
      }
    } else {
      alert('Para instalar Edge, visita: https://www.microsoft.com/edge');
    }
  };

  // FunciÃ³n para instalar en Chrome
  const installInChrome = async () => {
    if (deferredPrompt) {
      deferredPrompt.prompt();
      const { outcome } = await deferredPrompt.userChoice;
      
      if (outcome === 'accepted') {
        console.log('PWA instalada por el usuario');
        setShowButton(false);
      } else {
        console.log('PWA no instalada por el usuario');
      }
      
      setDeferredPrompt(null);
      setShowButton(false);
    } else {
      alert('Para instalar esta app, usa el menÃº de tu navegador:\n\nâ€¢ Chrome: MenÃº â‹® > Instalar app\nâ€¢ Edge: MenÃº â‹¯ > Aplicaciones > Instalar esta aplicaciÃ³n\nâ€¢ Safari: Compartir > AÃ±adir a pantalla de inicio');
      setShowButton(false);
    }
  };

  useEffect(() => {
    // Verificar si ya estÃ¡ instalado
    const checkIfInstalled = () => {
      const isStandalone = window.matchMedia('(display-mode: standalone)').matches;
      const isIOSStandalone = window.navigator.standalone === true;
      
      console.log('=== PWA INSTALL CHECK ===');
      console.log('isStandalone:', isStandalone);
      console.log('isIOSStandalone:', isIOSStandalone);
      console.log('display-mode:', window.matchMedia('(display-mode: standalone)').matches);
      console.log('navigator.standalone:', window.navigator.standalone);
      
      if (isStandalone || isIOSStandalone) {
        setIsInstalled(true);
        console.log('App ya estÃ¡ instalada');
        return;
      }
      console.log('App NO estÃ¡ instalada');
    };

    checkIfInstalled();

    // Escuchar el evento beforeinstallprompt
    const handleBeforeInstallPrompt = (e) => {
      console.log('=== BEFORE INSTALL PROMPT ===');
      console.log('Evento recibido:', e);
      e.preventDefault();
      setDeferredPrompt(e);
      setShowButton(true);
      console.log('Prompt disponible, mostrando botÃ³n');
    };

    // Escuchar cuando se instala la PWA
    const handleAppInstalled = () => {
      console.log('=== APP INSTALLED ===');
      setIsInstalled(true);
      setShowButton(false);
      setDeferredPrompt(null);
    };

    // Verificar si el evento ya se disparÃ³
    console.log('=== PWA HOOK INIT ===');
    console.log('Service Worker disponible:', 'serviceWorker' in navigator);
    console.log('Manifest disponible:', !!document.querySelector('link[rel="manifest"]'));

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    window.addEventListener('appinstalled', handleAppInstalled);

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
      window.removeEventListener('appinstalled', handleAppInstalled);
    };
  }, []);

  const handleInstall = async () => {
    // Detectar navegador
    const isEdge = navigator.userAgent.includes('Edg');
    const isChrome = navigator.userAgent.includes('Chrome') && !navigator.userAgent.includes('Edg');
    
    console.log('=== INSTALACIÃ“N PWA ===');
    console.log('Navegador actual:', isEdge ? 'Edge' : isChrome ? 'Chrome' : 'Otro');
    
    if (isChrome) {
      // Si es Chrome, redirigir a Edge
      console.log('Redirigiendo a Edge para mejor experiencia...');
      
      // Crear URL para Edge con la misma pÃ¡gina
      const currentUrl = window.location.href;
      const edgeUrl = `microsoft-edge:${currentUrl}`;
      
      // Detectar si es mÃ³vil
      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
      console.log('Dispositivo mÃ³vil detectado:', isMobile);
      
      if (isMobile) {
        // En mÃ³vil, mostrar opciones al usuario
        const userChoice = confirm(
          'ðŸ“± Â¿CÃ³mo quieres instalar la app?\n\n' +
          'âœ… Edge (Recomendado):\n' +
          'â€¢ Mejor experiencia offline\n' +
          'â€¢ NavegaciÃ³n automÃ¡tica\n' +
          'â€¢ Memoria de datos optimizada\n\n' +
          'âœ… Chrome (Actual):\n' +
          'â€¢ InstalaciÃ³n directa\n' +
          'â€¢ Sin cambios de navegador\n\n' +
          'Aceptar = Probar Edge\n' +
          'Cancelar = Instalar en Chrome'
        );
        
        if (userChoice) {
          // Usuario quiere Edge - intentar abrir
          try {
            window.open(edgeUrl, '_blank');
            
            // Verificar si Edge se abriÃ³ correctamente
            setTimeout(() => {
              const edgeInstalled = confirm(
                'ðŸš€ Â¿Se abriÃ³ Edge correctamente?\n\n' +
                'â€¢ SÃ­ = Instala la PWA desde Edge\n' +
                'â€¢ No = Edge no estÃ¡ instalado'
              );
              
              if (!edgeInstalled) {
                // Edge no estÃ¡ instalado, ofrecer instalarlo
                const installEdge = confirm(
                  'ðŸ“± Edge no estÃ¡ instalado\n\n' +
                  'Â¿Quieres instalarlo desde la tienda?\n\n' +
                  'â€¢ SÃ­ = Abrir tienda de aplicaciones\n' +
                  'â€¢ No = Instalar en Chrome'
                );
                
                if (installEdge) {
                  openAppStore();
                } else {
                  installInChrome();
                }
              }
            }, 1000);
            
          } catch (error) {
            console.warn('No se pudo abrir Edge:', error);
            // Edge no estÃ¡ disponible, ofrecer instalarlo
            const installEdge = confirm(
              'ðŸ“± Edge no estÃ¡ disponible\n\n' +
              'Â¿Quieres instalarlo desde la tienda?\n\n' +
              'â€¢ SÃ­ = Abrir tienda de aplicaciones\n' +
              'â€¢ No = Instalar en Chrome'
            );
            
            if (installEdge) {
              openAppStore();
            } else {
              installInChrome();
            }
          }
        } else {
          // Usuario prefiere Chrome
          installInChrome();
        }
      } else {
        // En escritorio, mostrar opciones al usuario
        const userChoice = confirm(
          'ðŸ’» Â¿CÃ³mo quieres instalar la app?\n\n' +
          'âœ… Edge (Recomendado):\n' +
          'â€¢ Mejor experiencia offline\n' +
          'â€¢ InstalaciÃ³n de PWA optimizada\n' +
          'â€¢ Cache de datos mejorado\n\n' +
          'âœ… Chrome (Actual):\n' +
          'â€¢ InstalaciÃ³n directa\n' +
          'â€¢ Sin cambios de navegador\n\n' +
          'Aceptar = Abrir en Edge\n' +
          'Cancelar = Instalar en Chrome'
        );
        
        if (userChoice) {
          // Usuario quiere Edge
          try {
            window.open(edgeUrl, '_blank');
            
            alert(
              'ðŸš€ Abriendo en Microsoft Edge para mejor experiencia!\n\n' +
              'Si no se abre automÃ¡ticamente, copia la URL y Ã¡brela en Edge.'
            );
            
          } catch (error) {
            console.warn('No se pudo abrir Edge:', error);
            // Edge no estÃ¡ disponible, ofrecer instalarlo
            const installEdge = confirm(
              'ðŸ’» Edge no estÃ¡ disponible\n\n' +
              'Â¿Quieres instalarlo?\n\n' +
              'â€¢ SÃ­ = Abrir pÃ¡gina de descarga\n' +
              'â€¢ No = Instalar en Chrome'
            );
            
            if (installEdge) {
              window.open('https://www.microsoft.com/edge', '_blank');
            } else {
              installInChrome();
            }
          }
        } else {
          // Usuario prefiere Chrome
          installInChrome();
        }
      }
    } else {
      // Si es Edge o otro navegador, usar instalaciÃ³n normal
      if (deferredPrompt) {
        deferredPrompt.prompt();
        const { outcome } = await deferredPrompt.userChoice;
        
        if (outcome === 'accepted') {
          console.log('PWA instalada por el usuario');
        } else {
          console.log('PWA no instalada por el usuario');
        }
        
        setDeferredPrompt(null);
        setShowButton(false);
      }
    }
  };

  const handleShowInfo = () => {
    // Detectar navegador
    const isEdge = navigator.userAgent.includes('Edg');
    const isChrome = navigator.userAgent.includes('Chrome') && !navigator.userAgent.includes('Edg');
    
    console.log('=== INFO PWA ===');
    console.log('Navegador actual:', isEdge ? 'Edge' : isChrome ? 'Chrome' : 'Otro');
    
    if (isChrome) {
      // Si es Chrome, mostrar informaciÃ³n sobre Edge y opciÃ³n de redirigir
      const userWantsEdge = confirm(
        'Para la mejor experiencia offline, te recomendamos usar Microsoft Edge.\n\n' +
        'Edge maneja mejor:\n' +
        'â€¢ Modo offline\n' +
        'â€¢ InstalaciÃ³n de PWA\n' +
        'â€¢ Cache de datos\n\n' +
        'Â¿Quieres abrir la app en Edge?'
      );
      
      if (userWantsEdge) {
        const currentUrl = window.location.href;
        const edgeUrl = `microsoft-edge:${currentUrl}`;
        
        try {
          window.open(edgeUrl, '_blank');
          alert('La app se abrirÃ¡ en Microsoft Edge para mejor experiencia offline.');
        } catch (error) {
          console.warn('No se pudo abrir Edge:', error);
          alert('No se pudo abrir Edge. Usando la informaciÃ³n normal de la app.');
          window.dispatchEvent(new CustomEvent('showPWAInfo'));
        }
      } else {
        // Mostrar informaciÃ³n normal
        window.dispatchEvent(new CustomEvent('showPWAInfo'));
      }
    } else {
      // Si es Edge o otro navegador, mostrar informaciÃ³n normal
      window.dispatchEvent(new CustomEvent('showPWAInfo'));
    }
  };

  // Para testing: forzar mostrar botÃ³n si no estÃ¡ instalado
  const canInstall = !isInstalled && (showButton || deferredPrompt || true); // true para testing

  return {
    deferredPrompt,
    isInstalled,
    showButton,
    handleInstall,
    handleShowInfo,
    canInstall
  };
};
